import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;
/* Given an array C of size N-1 and given that there are numbers from 1 to N with one element missing, the missing number is to be found.

Input:
The first line of input contains an integer T denoting the number of test cases. For each test case first line contains N(size of array). The subsequent line contains N-1 array elements.

Output:
Print the missing number in array.

Constraints:
1 ≤ T ≤ 200
1 ≤ N ≤ 107
1 ≤ C[i] ≤ 107

Example:
Input:
2
5
1 2 3 5
10
1 2 3 4 5 6 7 8 10

Output:
4
9

Explanation:
Testcase 1: Given array : 1 2 3 5. Missing element is 4.*/

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));
        int testCases = Integer.parseInt(scan.readLine());
        for (int i = 0; i < testCases; i++) {
            int size = Integer.parseInt(scan.readLine());
            String line = scan.readLine();
            String[] strs = line.split(" ");
            Set<Integer> mySet = new HashSet<>();
            for (int x = 0; x < strs.length; x++) {
                mySet.add(Integer.parseInt(strs[x]));
            }
            for (int x = 1; x < size + 1; x++) {
                if (!mySet.contains(x)) {
                    System.out.println(x);
                    break;
                }
            }

        }

    }
}

